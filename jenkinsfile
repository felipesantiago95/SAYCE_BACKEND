pipeline {
    agent any

    environment {
        SONARQUBE_URL = 'http://localhost:9000'  // URL de SonarQube
        SONARQUBE_TOKEN = credentials('sonar-token') // Token de autenticación en Jenkins
    }

    stages {
        stage('Preparar Entorno') {
            steps {
                script {
                    echo 'Verificando Node.js y npm'
                    bat '"C:\\Program Files\\nodejs\\node.exe" -v'
                    bat '"C:\\Program Files\\nodejs\\npm.cmd" -v'
                }
            }
        }

        stage('Instalar Dependencias') {
            steps {
               bat 'rmdir /s /q node_modules'
               bat 'del /f /q package-lock.json'
               bat 'npm install'  // Instalar dependencias
               bat 'npm rebuild'  // Reconstruir módulos nativos como bcrypt
               bat 'npm ci'  // Garantizar instalación exacta desde package-lock.json
            }
        }

        stage('Ejecutar Pruebas') {
            steps {
                script {
                    def exitCode = bat(returnStatus: true, script: 'npm test')
                    if (exitCode != 0) {
                        echo "Las pruebas fallaron, pero el pipeline continuará..."
                    }
                }
            }
        }

        stage('Análisis de Código con SonarQube') {
            steps {
                script {
                    bat '"C:\\sonar-scanner-cli-6.2.1.4610-windows-x64\\sonar-scanner-6.2.1.4610-windows-x64\\bin\\sonar-scanner.bat" -Dsonar.projectKey=MiProyecto -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=%SONARQUBE_TOKEN%'
                }
            }
        }

        stage('Escaneo de Seguridad con Trivy') {
            steps {
                bat '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe" build -t mi-aplicacion .'
                bat '"C:\\Program Files\\trivy\\trivy.exe" image mi-aplicacion'
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                bat '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe" build -t mi-aplicacion:latest .'
            }
        }

        stage('Despliegue en Entorno Local') {
            steps {
                bat '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe" stop mi-app-container || exit 0'
                bat '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe" rm mi-app-container || exit 0'
                bat '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe" run -d -p 3000:3000 --name mi-app-container mi-aplicacion:latest'
            }
        }
    }
post {
    success {
        echo "✅ Pipeline ejecutado exitosamente."
    }
    failure {
        echo "❌ El pipeline ha fallado. Revisar los logs para más detalles."
    }
}
}
