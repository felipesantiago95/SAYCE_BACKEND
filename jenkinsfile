pipeline {
    agent any

    environment {
        SONARQUBE_URL = 'http://localhost:9000'  // URL de SonarQube
        SONARQUBE_TOKEN = credentials('sonar-token') // Token de autenticaci칩n en Jenkins
    }

    stages {
        stage('Preparar Entorno') {
            steps {
                script {
                    echo 'Verificando Node.js y npm'
                    bat '"C:\\Program Files\\nodejs\\node.exe" -v'
                    bat '"C:\\Program Files\\nodejs\\npm.cmd" -v'
                }
            }
        }

        stage('Instalar Dependencias') {
            steps {
                bat 'npm install'
            }
        }

        stage('Ejecutar Pruebas') {
            steps {
                script {
                    def exitCode = bat(returnStatus: true, script: 'npm test')
                    if (exitCode != 0) {
                        echo "Las pruebas fallaron, pero el pipeline continuar치..."
                    }
                }
            }
        }

        stage('An치lisis de C칩digo con SonarQube') {
            steps {
                script {
                    bat '"C:\\Program Files\\nodejs\\npm.cmd" exec -- sonarqube-scanner -Dsonar.projectKey=MiProyecto -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=%SONARQUBE_TOKEN%'
                }
            }
        }

        stage('Escaneo de Seguridad con Trivy') {
            steps {
                bat 'docker build -t mi-aplicacion .'
                bat 'trivy image mi-aplicacion'
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                bat 'docker build -t mi-aplicacion:latest .'
            }
        }

        stage('Despliegue en Entorno Local') {
            steps {
                bat 'docker run -d -p 3000:3000 --name mi-app-container mi-aplicacion:latest'
            }
        }
    }
}
